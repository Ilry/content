require "prefabutil" local assets={Asset("ANIM","anim/refine_chest.zip")} local DIGEST_TIMER_NAME="refine" local DIGEST_TIME=REFINE_WAIT local MAX_TECH_DIST=REFINE_TECH_DISTANCE local dorefine=false local needmoretech=0 local needtemplate=false local note="" local templatenote="" local characterrefinestr={willow=" bernie_inactive lighter ",wolfgang=" dumbbell_golden dumbbell_marble dumbbell_gem ",wendy=" ghostlyelixir_slowregen ghostlyelixir_fastregen ghostlyelixir_shield ghostlyelixir_retaliation ghostlyelixir_attack ghostlyelixir_speed ",wickerbottom=" book_birds book_horticulture book_silviculture book_sleep book_brimstone book_tentacles ",woodie=" wereitem_goose wereitem_beaver wereitem_moose ",wathgrithr=" spear_wathgrithr wathgrithrhat ",winona=" sewing_tape ",warly=" spice_garlic spice_sugar spice_chili spice_salt portablecookpot_item ",wormwood=" armor_bramble trap_bramble compostwrap ",wurt=" turf_marsh spice_salt ",walter=" slingshotammo_rock slingshotammo_gold slingshotammo_marble slingshotammo_poop slingshotammo_freeze slingshotammo_slow slingshotammo_thulecite portabletent_item walterhat ",} local charactertagtable={willow={"bernieowner"},wolfgang={"strongman"},wendy={"ghostlyfriend"},wickerbottom={"bookbuilder"},woodie={},wathgrithr={"valkyrie"},winona={"handyperson"},warly={"masterchef"},wormwood={"plantkin"},wurt={"playermerm"},walter={"slingshot_sharpshooter"},} local function IsCharacter(inst,prefab) if inst and prefab then if inst.prefab==prefab then return true elseif charactertagtable[prefab] and type(charactertagtable[prefab])=="table" and #charactertagtable[prefab]>0 then for k,v in pairs(charactertagtable[prefab]) do if not inst:HasTag(v) then return false end end return true end end return false end local type_tool=" axe goldenaxe pickaxe goldenpickaxe shovel goldenshovel farm_hoe golden_farm_hoe hammer pitchfork wateringcan premiumwateringcan razor fatherpencil pocket_scale beef_bell saddlehorn saddle_basic saddle_war saddle_race bursh" local type_light=" torch minerhat molehat pumpkin_lantern lantern " local type_life=" reviver healingsalve tillweedsalve bandage lifeinjector trap birdtrap bugnet fishingrod oceanfishingrod miniflare grass_umbrella umbrella waterballoon compass heatrock giftwrap bundlewrap bedroll_straw bedroll_furry minifan featherfan" local type_food=" farm_plow_item fertilizer soil_amender treegrowthsolution " local type_tech=" transistor gunpower " local type_weapon=" spear hambat nightstick whip armorgrass armorwood armormarble footballhat blowdart_sleep blowdart_fire blowdart_pipe blowdart_yellow boomerang beemine trap_teeth armordragonfly staff_tornado " local type_build=" minisign_item fence_gate_item fence_item wall_hay_item wall_wood_item wall_stone_item wall_moonrock_item turf_road turf_woodfloor turf_checkerfloor truf_carpetfloor truf_dragonfly " local type_ship=" boat_item boatpatch oar oar_driftwood anchor_item mast_item mast_malbatross_item steeringwheel_item mastupgrade_lamp_item mastupgrade_lightningrod_item " local type_refine=" rope boards cutstone papyrus waxpaper beeswax marblebean beager_fur nightmarefuel purplegrm moonrockcrater malbatross_feathered_weave refined_dust " local type_magic=" panflute onemanband armor_sanity nightsword batbat armorslurper amulet blueamulet purpleamulet firestaff icestaff telestaff reskin_tool " local type_clothing=" sewing_kit flowerhat strawhat tophat rainhat beefalohat winterhat catcoonhat kelphat goggleshat deserthat amoonstorm_goggleshat watermelonhat icehat beehat featherhat bushhat raincoat sweatervest trunkvest_summer trunkvest_winter reflectivevest hawaiianshirt cane beagervest eyebrellahat red_mushroomhat green_mushroomhat blue_mushroomhat " local type_ancient=" thulecite wall_ruins_item nightmare_timepiece orangeamulet yellowamulet greenamulet orangestaff yellowstaff greenstaff multitool_axe_pickaxe nutrientsgoggleshat ruinshat armorruins ruins_bat eyeturret_item " local type_moon=" moonrockidol moonglassaxe glasscutter " local cannotrefine=" " if not REFINE_TOOL then cannotrefine=cannotrefine .. " " .. type_tool end if not REFINE_LIGHT then cannotrefine=cannotrefine .. " " .. type_light end if not REFINE_LIFE then cannotrefine=cannotrefine .. " " .. type_life end if not REFINE_FOOD then cannotrefine=cannotrefine .. " " .. type_food end if not REFINE_TECH then cannotrefine=cannotrefine .. " " .. type_tech end if not REFINE_WEAPON then cannotrefine=cannotrefine .. " " .. type_weapon end if not REFINE_BUILD then cannotrefine=cannotrefine .. " " .. type_build end if not REFINE_SHIP then cannotrefine=cannotrefine .. " " .. type_ship end if not REFINE_REFINE then cannotrefine=cannotrefine .. " " .. type_refine end if not REFINE_MAGIC then cannotrefine=cannotrefine .. " " .. type_magic end if not REFINE_CLOTHING then cannotrefine=cannotrefine .. " " .. type_clothing end if not REFINE_ANCIENT then cannotrefine=cannotrefine .. " " .. type_ancient end if not REFINE_MOON then cannotrefine=cannotrefine .. " " .. type_moon end cannotrefine=cannotrefine .. " " local needtemplatestr=" " needtemplatestr=needtemplatestr .. " axe goldenaxe pickaxe goldenpickaxe shovel goldenshovel farm_hoe golden_farm_hoe hammer pitchfork wateringcan premiumwateringcan fatherpencil " needtemplatestr=needtemplatestr .. " torch " needtemplatestr=needtemplatestr .. " reviver trap birdtrap bugnet fishingrod oceanfishingrod miniflare grass_umbrella umbrella compass heatrock giftwrap bundlewrap bedroll_straw minifan featherfan " needtemplatestr=needtemplatestr .. type_food needtemplatestr=needtemplatestr .. " spear hambat nightstick whip armorgrass armorwood armormarble footballhat blowdart_sleep blowdart_fire blowdart_pipe blowdart_yellow boomerang beemine armordragonfly staff_tornado " needtemplatestr=needtemplatestr .. type_build needtemplatestr=needtemplatestr .. type_ship needtemplatestr=needtemplatestr .. " moonrockcrater malbatross_feathered_weave refined_dust " needtemplatestr=needtemplatestr .. " wall_ruins_item ruinshat armorruins " needtemplatestr=needtemplatestr .. " moonrockidol moonglassaxe glasscutter " needtemplatestr=needtemplatestr .. " dumbbell_golden dumbbell_gem spear_wathgrithr wathgrithrhat sewing_tape portablecookpot_item walterhat " local function stack_up(inst) for i=1,inst.components.container:GetNumSlots() do local d_item=inst.components.container:RemoveItemBySlot(i) if d_item~=nil then inst.components.container:GiveItem(d_item) end end end function compare(a,b) if a~=nil and b~=nil then if a.prefab==b.prefab then if a.components.stackable~=nil and b.components.stackable~=nil then return a.components.stackable:StackSize()>b.components.stackable:StackSize() end return false end return a.prefab<b.prefab end return true end local function sort_up(inst) table.sort(inst.components.container.slots,compare) end function sync_conainer(inst) for i=1,inst.components.container:GetNumSlots() do local item=inst.components.container.slots[i] if item~=nil then inst:PushEvent("itemget",{slot=i,item=item}) end end end local function autosort(inst) stack_up(inst) sort_up(inst) sync_conainer(inst) end local function OnHammered(inst,worker) inst.components.lootdropper:DropLoot() if inst.components.container~=nil then inst.components.container:DropEverything() end local fx=SpawnPrefab("collapse_small") fx.Transform:SetPosition(inst.Transform:GetWorldPosition()) fx:SetMaterial("metal") inst:Remove() end local function OnHit(inst,worker) if not worker:HasTag("player") then inst.components.workable:SetWorkLeft(3) return end inst.AnimState:PlayAnimation("hit") inst.AnimState:PushAnimation("closed",false) end local function OnBuilt(inst) inst.AnimState:PlayAnimation("place") inst.AnimState:PushAnimation("closed",false) inst.SoundEmitter:PlaySound("dontstarve/common/chest_craft") end local function OnOpen(inst) inst.AnimState:PlayAnimation("open") inst.SoundEmitter:PlaySound("dontstarve/wilson/chest_open") if inst.components.timer:TimerExists(DIGEST_TIMER_NAME) then inst.components.timer:StopTimer(DIGEST_TIMER_NAME) inst.SoundEmitter:KillSound("loop") end end local TECH_TAGS={"structure"} local function findtech(inst) local x,y,z=inst.Transform:GetWorldPosition() local ents=TheSim:FindEntities(x,y,z,MAX_TECH_DIST,TECH_TAGS) for k,v in ipairs(ents) do if tostring(v.prefab)=="researchlab2" then if not ( v:HasTag("burnt") or v:HasTag("fire") ) then return 2 end end end for k,v in ipairs(ents) do if tostring(v.prefab)=="researchlab" then if not ( v:HasTag("burnt") or v:HasTag("fire") ) then return 1 end end end return 0 end local function findmagic(inst) local x,y,z=inst.Transform:GetWorldPosition() local ents=TheSim:FindEntities(x,y,z,MAX_TECH_DIST,TECH_TAGS) for k,v in ipairs(ents) do if tostring(v.prefab)=="researchlab3" then if not ( v:HasTag("burnt") or v:HasTag("fire") ) then return 4 end end end for k,v in ipairs(ents) do if tostring(v.prefab)=="researchlab4" then if not ( v:HasTag("burnt") or v:HasTag("fire") ) then return 3 end end end return 0 end local function findportableblender(inst) local x,y,z=inst.Transform:GetWorldPosition() local ents=TheSim:FindEntities(x,y,z,MAX_TECH_DIST,TECH_TAGS) if inst.components.container:Has("portableblender_item",1) and (REFINE_CHARACTER==2 or (inst.doer and IsCharacter(inst.doer,"warly"))) then return 10 end for k,v in ipairs(ents) do if tostring(v.prefab)=="portableblender" then if not ( v:HasTag("burnt") or v:HasTag("fire") ) then if (REFINE_CHARACTER==2 or (inst.doer and IsCharacter(inst.doer,"warly"))) then return 10 end end end end return 0 end local function findmoonrockseed(inst) local container=inst.components.container for i=1,container:GetNumSlots() do local item=container:GetItemInSlot(i) if item and item.prefab=="moonrockseed" then if item._upgraded==true then return 14 else return 13 end end end return 0 end local function findancient_altar(inst) local x,y,z=inst.Transform:GetWorldPosition() local ents=TheSim:FindEntities(x,y,z,MAX_TECH_DIST,TECH_TAGS) for k,v in ipairs(ents) do if tostring(v.prefab)=="ancient_altar" then return 12 end end for k,v in ipairs(ents) do if tostring(v.prefab)=="ancient_altar_broken" then return 11 end end return 0 end local function findseafaring_prototyper(inst) local x,y,z=inst.Transform:GetWorldPosition() local ents=TheSim:FindEntities(x,y,z,MAX_TECH_DIST,TECH_TAGS) for k,v in ipairs(ents) do if tostring(v.prefab)=="seafaring_prototyper" then return 5 end end return 0 end local function refine(inst,costnamelist,costnumlist,givenamelist,givenumlist,techneed) local enablerefine=true if inst.doer==nil and (REFINE_ONLYONESTEP or REFINE_NEEDTEMPLATE) then enablerefine=false end local truecost=false for _,v in pairs(costnumlist) do if v~=0 then truecost=true break end end if truecost==false then enablerefine=false if REFINE_CHEST_CANSHOWSTR==1 then print(STRINGS.NAMES.REFINE_CHEST .. " : " .. STRINGS.NAMES[string.upper(givenamelist[1])] .. " " .. "AllCost==0") end end local container=inst.components.container if dorefine and REFINE_ONLYONESTEP then enablerefine=false end if REFINE_NEEDTEMPLATE then if not container:Has(givenamelist[1],1) then needtemplate=true enablerefine=false if templatenote=="" and string.find(cannotrefine," " .. givenamelist[1] .. " ")==nil then templatenote=givenamelist[1] end end else if string.find(" " .. needtemplatestr .. " ",givenamelist[1]) then local temp=true if not container:Has(givenamelist[1],1) then for i,v in pairs(costnamelist) do if not container:Has(v,costnumlist[i]) then temp=false end end if temp==true then enablerefine=false if templatenote=="" and string.find(cannotrefine," " .. givenamelist[1] .. " ")==nil then needtemplate=true templatenote=givenamelist[1] end end end end end if not REFINE_TOOL and string.find(" " .. type_tool .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_LIGHT and string.find(" " .. type_light .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_LIFE and string.find(" " .. type_life .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_FOOD and string.find(" " .. type_food .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_TECH and string.find(" " .. type_tech .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_WEAPON and string.find(" " .. type_weapon .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_BUILD and string.find(" " .. type_build .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_SHIP and string.find(" " .. type_ship .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_REFINE and string.find(" " .. type_refine .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_MAGIC and string.find(" " .. type_magic .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_CLOTHING and string.find(" " .. type_clothing .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_ANCIENT and string.find(" " .. type_ancient .. " ",givenamelist[1]) then enablerefine=false elseif not REFINE_MOON and string.find(" " .. type_moon .. " ",givenamelist[1]) then enablerefine=false end if REFINE_CHARACTER~=2 then for k,v in pairs(characterrefinestr) do if string.find(v," " .. givenamelist[1] .. " ") then if REFINE_CHARACTER==0 then enablerefine=false elseif inst.doer and (not IsCharacter(inst.doer,k)) then enablerefine=false end end end end local nearby_tech=findtech(inst) local nearby_magic=findmagic(inst) local nearby_portableblender=findportableblender(inst) local nearby_ancient_altar=findancient_altar(inst) local nearby_moon=findmoonrockseed(inst) local nearby_prototyper=findseafaring_prototyper(inst) local refinenum=0 if REFINE_CHARACTER~=0 and (REFINE_CHARACTER==2 or (inst.doer and IsCharacter(inst.doer,"walter"))) and string.find(" slingshotammo_rock slingshotammo_gold slingshotammo_marble slingshotammo_poop slingshotammo_freeze slingshotammo_slow slingshotammo_thulecite "," " .. givenamelist[1] .. " ") then for i,v in pairs(costnamelist) do if not container:Has(v,costnumlist[i]) then enablerefine=false end end if enablerefine and not container:Has(givenamelist[1],1) then enablerefine=false note=STRINGS.REFINE_CHEST_WALTER end end if REFINE_CHARACTER~=0 and (REFINE_CHARACTER==2 or (inst.doer and IsCharacter(inst.doer,"warly"))) and string.find(" spice_garlic spice_sugar spice_chili spice_salt "," " .. givenamelist[1] .. " ") then for i,v in pairs(costnamelist) do if not container:Has(v,costnumlist[i]) then enablerefine=false end end if enablerefine and nearby_portableblender~=10 then enablerefine=false note=STRINGS.REFINE_CHEST_WARLY end end while(enablerefine) do for i,v in pairs(costnamelist) do if not container:Has(v,math.max(costnumlist[i],1)) then enablerefine=false end end if not REFINE_NOTECHNEED then if enablerefine then if techneed==4 and nearby_magic~=4 then needmoretech=4 enablerefine=false elseif techneed==3 and (nearby_magic~=3 and nearby_magic~=4) then needmoretech=3 enablerefine=false elseif techneed==2 and nearby_tech~=2 then needmoretech=2 enablerefine=false elseif techneed==1 and (nearby_tech~=1 and nearby_tech~=2) then needmoretech=1 enablerefine=false elseif techneed==13 and nearby_moon~=13 then needmoretech=13 enablerefine=false elseif techneed==5 and nearby_moon~=5 then needmoretech=5 enablerefine=false elseif techneed==12 and nearby_tech~=12 then needmoretech=12 enablerefine=false elseif techneed==11 and (nearby_tech~=11 and nearby_tech~=12) then needmoretech=11 enablerefine=false elseif techneed==10 and nearby_portableblender~=10 then enablerefine=false if inst.doer and IsCharacter(inst.doer,"warly") then note=STRINGS.REFINE_CHEST_WARLY end end end end if enablerefine then for i,v in pairs(costnamelist) do container:ConsumeByName(v,costnumlist[i]) end refinenum=refinenum + 1 end end if refinenum~=0 then if REFINE_PUNISHCOST=="hunger" and inst.doer then if inst.doer.components.hunger then inst.doer.components.hunger:DoDelta(-1*refinenum) end elseif REFINE_PUNISHCOST=="sanity" then if inst.doer.components.sanity then inst.doer.components.sanity:DoDelta(-1*refinenum) end elseif REFINE_PUNISHCOST=="health" then if inst.doer.components.health then inst.doer.components.health:DoDelta(-1*refinenum) end end end local itemlist={}local allskinname={}local allskin_id={}if REFINE_WITH_SKIN and refinenum~=0 then for i=1,container.numslots do local temp=container.slots[i] if temp~=nil and temp.skinname~=nil and temp.skin_id~=nil and itemlist[#itemlist]~=temp.prefab then table.insert(itemlist,temp.prefab) table.insert(allskinname,temp.skinname) table.insert(allskin_id,temp.skin_id) end end end for k=1,refinenum,1 do dorefine=true for i,v in pairs(givenamelist) do for j=1,givenumlist[i],1 do local temp=SpawnPrefab(v) local tempprefab=temp.prefab if REFINE_WITH_SKIN and inst.doer then for i=1,#itemlist do if itemlist[i]==tempprefab then TheSim:ReskinEntity(temp.GUID,nil,allskinname[i],allskin_id[i],inst.doer.userid) end end end container:GiveItem(temp,nil,nil,true) end end end if dorefine then autosort(inst) end end local function GetRefineRecipe(inst,prefab,techneed) if inst==nil or type(prefab)~="string" or type(techneed)~="number" then return end local ValidRecipe=GetValidRecipe(prefab) if ValidRecipe==nil then return end local costnamelist={}local costnumlist={}local givenamelist={prefab}local givenumlist={} if type(ValidRecipe.numtogive)=="number" and type(ValidRecipe.ingredients)=="table" then table.insert(givenumlist,ValidRecipe.numtogive) for k,v in pairs(ValidRecipe.ingredients) do if type(v.type)=="string" and type(v.amount)=="number" then table.insert(costnamelist,v.type) table.insert(costnumlist,v.amount) end end end if type(ValidRecipe.character_ingredients)=="table" then for k,v in pairs(ValidRecipe.character_ingredients) do if type(v.type)=="string" then if REFINE_CHEST_CANSHOWSTR==1 then print(STRINGS.NAMES.REFINE_CHEST .. " : " .. STRINGS.NAMES[string.upper(prefab)] .. " " .. "illegal cost:" .. v.type) end return end end end local auto_techneed=0 if ValidRecipe.level.ANCIENT>0 then if ValidRecipe.level.ANCIENT>2 then auto_techneed=12 else auto_techneed=11 end elseif ValidRecipe.level.SEAFARING>0 then auto_techneed=5 elseif ValidRecipe.level.FOODPROCESSING>0 then auto_techneed=10 elseif ValidRecipe.level.CELESTIAL>0 then if ValidRecipe.level.CELESTIAL>1 then auto_techneed=14 else auto_techneed=13 end elseif ValidRecipe.level.MAGIC>0 and ValidRecipe.level.SCIENCE==0 then if ValidRecipe.level.MAGIC>2 then auto_techneed=4 else auto_techneed=3 end elseif ValidRecipe.level.SCIENCE>0 then auto_techneed=ValidRecipe.level.SCIENCE end if techneed~=auto_techneed then if techneed==99 then if REFINE_CHEST_CANSHOWSTR==1 then print(STRINGS.NAMES.REFINE_CHEST .. " : " .. STRINGS.NAMES[string.upper(prefab)] .. " " .. "techneed:" .. techneed .. "<>" .. "auto_techneed:" .. auto_techneed .. " [Replace]") end techneed=auto_techneed end end if next(costnamelist) and next(costnumlist) and next(givenamelist) and next(givenumlist) then if #costnamelist==#costnumlist and #givenamelist==#givenumlist then refine(inst,costnamelist,costnumlist,givenamelist,givenumlist,techneed) end end end local function StartDigest(inst) inst.components.container.canbeopened=true inst.AnimState:PlayAnimation("hit",true) inst.SoundEmitter:PlaySound("dontstarve/common/together/sacred_chest/shake_LP","loop") inst.components.timer:StartTimer(DIGEST_TIMER_NAME,DIGEST_TIME) end local function TryRefineByMiniSign(inst) local minisignlist={}local container=inst.components.container for i=1,container:GetNumSlots() do local item=container:GetItemInSlot(i) if item and item.prefab=="minisign_drawn" then if item.components.drawable then local drawimage=item.components.drawable:GetImage() if drawimage~=nil then table.insert(minisignlist,drawimage) end end end end for i=1,#minisignlist do GetRefineRecipe(inst,minisignlist[i],99) end end local function EndRefineStr(inst) autosort(inst) if REFINE_CHEST_CANSHOWSTR==0 then return end local str=" " if inst.components.talker then if dorefine then str=STRINGS.REFINE_CHEST_DOREFINE .. "\n" if needmoretech~=0 then str=str .. STRINGS.REFINE_CHEST_BUT end else str=str .. STRINGS.REFINE_CHEST_NOREFINE .. "\n" end if needmoretech==4 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH4 .. "\n" elseif needmoretech==3 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH3 .. "\n" elseif needmoretech==2 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH2 .. "\n" elseif needmoretech==1 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH1 .. "\n" elseif needmoretech==13 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH13 .. "\n" elseif needmoretech==5 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH5 .. "\n" elseif needmoretech==11 or needmoretech==12 then str=str .. STRINGS.REFINE_CHEST_NEEDMORETECH11 .. "\n" end if REFINE_CHEST_CANSHOWSTR~=2 then if str~=nil and needtemplate and not dorefine then str=str .. STRINGS.REFINE_CHEST_NEEDTEMPLATE if templatenote~="" then str=str .. "　" .. STRINGS.NAMES[string.upper(templatenote)] .. "\n" else str=str .. "\n" end end end if str~=nil and note~="" then str=str .. note end if REFINE_CHEST_CANSHOWSTR~=0 then inst.components.talker:Say(str) end end inst.doer=nil end local function OnTimerDone(inst,data) if data and data.name==DIGEST_TIMER_NAME then autosort(inst) if REFINE_BY_MINISIGN~=0 then TryRefineByMiniSign(inst) if REFINE_BY_MINISIGN==2 then EndRefineStr(inst) return end end if REFINE_CHARACTER~=0 then GetRefineRecipe(inst,"bernie_inactive",0) GetRefineRecipe(inst,"lighter",0) GetRefineRecipe(inst,"dumbbell_golden",0) GetRefineRecipe(inst,"dumbbell_marble",0) GetRefineRecipe(inst,"dumbbell_gem",0) GetRefineRecipe(inst,"ghostlyelixir_slowregen",0) GetRefineRecipe(inst,"ghostlyelixir_fastregen",0) GetRefineRecipe(inst,"ghostlyelixir_shield",0) GetRefineRecipe(inst,"ghostlyelixir_retaliation",0) GetRefineRecipe(inst,"ghostlyelixir_attack",0) GetRefineRecipe(inst,"ghostlyelixir_speed",0) GetRefineRecipe(inst,"book_birds",0) GetRefineRecipe(inst,"book_horticulture",0) GetRefineRecipe(inst,"book_silviculture",2) GetRefineRecipe(inst,"book_sleep",3) GetRefineRecipe(inst,"book_brimstone",4) GetRefineRecipe(inst,"book_tentacles",2) GetRefineRecipe(inst,"wereitem_goose",0) GetRefineRecipe(inst,"wereitem_beaver",0) GetRefineRecipe(inst,"wereitem_moose",0) GetRefineRecipe(inst,"spear_wathgrithr",0) GetRefineRecipe(inst,"wathgrithrhat",0) GetRefineRecipe(inst,"sewing_tape",0) GetRefineRecipe(inst,"spice_garlic",10) GetRefineRecipe(inst,"spice_sugar",10) GetRefineRecipe(inst,"spice_chili",10) GetRefineRecipe(inst,"spice_salt",10) GetRefineRecipe(inst,"portablecookpot_item",0) GetRefineRecipe(inst,"armor_bramble",0) GetRefineRecipe(inst,"trap_bramble",0) GetRefineRecipe(inst,"compostwrap",0) GetRefineRecipe(inst,"turf_marsh",0) GetRefineRecipe(inst,"mermhat",0) GetRefineRecipe(inst,"slingshotammo_rock",0) GetRefineRecipe(inst,"slingshotammo_gold",1) GetRefineRecipe(inst,"slingshotammo_marble",2) GetRefineRecipe(inst,"slingshotammo_poop",1) GetRefineRecipe(inst,"slingshotammo_freeze",3) GetRefineRecipe(inst,"slingshotammo_slow",4) GetRefineRecipe(inst,"slingshotammo_thulecite",11) GetRefineRecipe(inst,"portabletent_item",1) GetRefineRecipe(inst,"walterhat",0) end GetRefineRecipe(inst,"sewing_kit",2) GetRefineRecipe(inst,"axe",0) GetRefineRecipe(inst,"goldenaxe",2) GetRefineRecipe(inst,"pickaxe",0) GetRefineRecipe(inst,"goldenpickaxe",2) GetRefineRecipe(inst,"shovel",1) GetRefineRecipe(inst,"goldenshovel",2) GetRefineRecipe(inst,"farm_hoe",1) GetRefineRecipe(inst,"golden_farm_hoe",2) GetRefineRecipe(inst,"hammer",0) GetRefineRecipe(inst,"pitchfork",1) GetRefineRecipe(inst,"wateringcan",1) GetRefineRecipe(inst,"premiumwateringcan",2) GetRefineRecipe(inst,"featherpencil",1) GetRefineRecipe(inst,"torch",0) GetRefineRecipe(inst,"minerhat",2) GetRefineRecipe(inst,"pumpkin_lantern",1) GetRefineRecipe(inst,"healingsalve",1) GetRefineRecipe(inst,"bandage",2) GetRefineRecipe(inst,"tillweedsalve",2) GetRefineRecipe(inst,"lifeinjector",2) GetRefineRecipe(inst,"trap",0) GetRefineRecipe(inst,"birdtrap",1) GetRefineRecipe(inst,"bugnet",1) GetRefineRecipe(inst,"fishingrod",1) GetRefineRecipe(inst,"oceanfishingrod",1) GetRefineRecipe(inst,"miniflare",0) GetRefineRecipe(inst,"grass_umbrella",0) GetRefineRecipe(inst,"umbrella",1) GetRefineRecipe(inst,"waterballoon",1) GetRefineRecipe(inst,"compass",0) GetRefineRecipe(inst,"heatrock",2) GetRefineRecipe(inst,"giftwrap",0) GetRefineRecipe(inst,"bundlewrap",0) GetRefineRecipe(inst,"bedroll_straw",1) GetRefineRecipe(inst,"bedroll_furry",2) GetRefineRecipe(inst,"minifan",0) GetRefineRecipe(inst,"featherfan",2) GetRefineRecipe(inst,"farm_plow_item",1) GetRefineRecipe(inst,"fertilizer",2) GetRefineRecipe(inst,"soil_amender",2) GetRefineRecipe(inst,"treegrowthsolution",2) GetRefineRecipe(inst,"transistor",1) GetRefineRecipe(inst,"gunpowder",2) GetRefineRecipe(inst,"spear",1) GetRefineRecipe(inst,"hambat",2) GetRefineRecipe(inst,"nightstick",2) GetRefineRecipe(inst,"whip",2) GetRefineRecipe(inst,"armorgrass",0) GetRefineRecipe(inst,"armormarble",2) GetRefineRecipe(inst,"footballhat",2) GetRefineRecipe(inst,"blowdart_sleep",2) GetRefineRecipe(inst,"blowdart_fire",2) GetRefineRecipe(inst,"blowdart_pipe",2) GetRefineRecipe(inst,"blowdart_yellow",2) GetRefineRecipe(inst,"boomerang",2) GetRefineRecipe(inst,"beemine",2) GetRefineRecipe(inst,"armordragonfly",2) GetRefineRecipe(inst,"staff_tornado",2) GetRefineRecipe(inst,"minisign_item",1) GetRefineRecipe(inst,"fence_gate_item",2) GetRefineRecipe(inst,"fence_item",1) GetRefineRecipe(inst,"wall_hay_item",1) GetRefineRecipe(inst,"wall_wood_item",1) GetRefineRecipe(inst,"wall_moonrock_item",2) GetRefineRecipe(inst,"turf_road",2) GetRefineRecipe(inst,"turf_woodfloor",2) GetRefineRecipe(inst,"turf_carpetfloor",2) GetRefineRecipe(inst,"turf_dragonfly",2) GetRefineRecipe(inst,"boat_item",5) GetRefineRecipe(inst,"boatpatch",0) GetRefineRecipe(inst,"oar",0) GetRefineRecipe(inst,"oar_driftwood",0) GetRefineRecipe(inst,"anchor_item",5) GetRefineRecipe(inst,"mast_item",5) GetRefineRecipe(inst,"mast_malbatross_item",5) GetRefineRecipe(inst,"steeringwheel_item",5) GetRefineRecipe(inst,"mastupgrade_lamp_item",5) GetRefineRecipe(inst,"mastupgrade_lightningrod_item",5) GetRefineRecipe(inst,"rope",1) GetRefineRecipe(inst,"trap_teeth",2) GetRefineRecipe(inst,"armorwood",1) GetRefineRecipe(inst,"boards",1) GetRefineRecipe(inst,"cutstone",1) GetRefineRecipe(inst,"wall_stone_item",2) GetRefineRecipe(inst,"papyrus",1) GetRefineRecipe(inst,"waxpaper",2) GetRefineRecipe(inst,"beesawx",1) GetRefineRecipe(inst,"marblebean",2) GetRefineRecipe(inst,"beager_fur",2) GetRefineRecipe(inst,"nightmarefuel",3) GetRefineRecipe(inst,"moonrockcrater",2) GetRefineRecipe(inst,"malbatross_feathered_weave",2) GetRefineRecipe(inst,"refined_dust",0) GetRefineRecipe(inst,"lantern",2) GetRefineRecipe(inst,"minerhat",2) GetRefineRecipe(inst,"panflute",3) GetRefineRecipe(inst,"onemanband",3) GetRefineRecipe(inst,"armor_sanity",4) GetRefineRecipe(inst,"nightsword",4) GetRefineRecipe(inst,"batbat",4) GetRefineRecipe(inst,"armorslurper",4) GetRefineRecipe(inst,"firestaff",4) GetRefineRecipe(inst,"icestaff",3) GetRefineRecipe(inst,"telestaff",4) GetRefineRecipe(inst,"amulet",3) GetRefineRecipe(inst,"blueamulet",3) GetRefineRecipe(inst,"purpleamulet",4) GetRefineRecipe(inst,"purplegem",3) GetRefineRecipe(inst,"thulecite",11) GetRefineRecipe(inst,"wall_ruins_item",11) GetRefineRecipe(inst,"multitool_axe_pickaxe",12) GetRefineRecipe(inst,"ruins_bat",12) GetRefineRecipe(inst,"ruinshat",12) GetRefineRecipe(inst,"armorruins",12) GetRefineRecipe(inst,"eyeturret_item",12) GetRefineRecipe(inst,"moonrockidol",13) GetRefineRecipe(inst,"moonglassaxe",14) GetRefineRecipe(inst,"glasscutter",14) inst.SoundEmitter:KillSound("loop") inst.AnimState:PushAnimation("closed") EndRefineStr(inst) end end local function OnClose(inst,doer) dorefine=false needmoretech=0 needtemplate=false note="" templatenote="" inst.AnimState:PlayAnimation("close") inst.AnimState:PushAnimation("closed",false) inst.SoundEmitter:PlaySound("dontstarve/wilson/chest_close") if inst.components.timer:TimerExists(DIGEST_TIMER_NAME) then inst.components.timer:StopTimer(DIGEST_TIMER_NAME) inst.SoundEmitter:KillSound("loop") end if not inst.components.container:IsEmpty() then inst.doer=doer StartDigest(inst) end end local function fn() local inst=CreateEntity() inst.entity:AddTransform() inst.entity:AddAnimState() inst.entity:AddSoundEmitter() inst.entity:AddMiniMapEntity() inst.entity:AddNetwork() inst.MiniMapEntity:SetIcon("refine_chest_map_icon.tex") inst:AddTag("chest") inst:AddTag("structure") inst.AnimState:SetBank("chest") inst.AnimState:SetBuild("refine_chest") inst.AnimState:PlayAnimation("closed") MakeSnowCoveredPristine(inst) inst.entity:SetPristine() inst:AddComponent("talker") inst.components.talker.fontsize=32 inst.components.talker.font=TALKINGFONT inst.components.talker.colour=Vector3(0 / 255,255 / 255,255 / 255) inst.components.talker.offset=Vector3(0,-200,0) inst.components.talker.symbol="fossil_chest" if not TheWorld.ismastersim then return inst end inst:AddComponent("inspectable") inst:AddComponent("lootdropper") inst:AddComponent("workable") inst.components.workable:SetWorkAction(ACTIONS.HAMMER) inst.components.workable:SetWorkLeft(3) inst.components.workable:SetOnFinishCallback(OnHammered) inst.components.workable:SetOnWorkCallback(OnHit) inst:AddComponent("container") inst.components.container:WidgetSetup("refine_chest") inst.components.container.onopenfn=OnOpen inst.components.container.onclosefn=OnClose inst.components.container.skipclosesnd=true inst.components.container.skipopensnd=true inst:ListenForEvent("onbuilt",OnBuilt) inst.doer=nil inst:AddComponent("timer") inst:ListenForEvent("timerdone",OnTimerDone) MakeSnowCovered(inst) return inst end return Prefab("refine_chest",fn,assets,prefabs),MakePlacer("refine_chest_placer","chest","refine_chest","closed")