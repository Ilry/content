local _G=GLOBAL local TheInput=_G.TheInput local TheWorld=_G.TheWorld local TheSim=_G.TheSim local Sleep=_G.Sleep local FRAMES=_G.FRAMES local STRINGS=_G.STRINGS local ThePlayer local default_showoceanfish=GetModConfigData("default_showoceanfish") local Input_Show_Value=default_showoceanfish and 1 or 0 local toggle_showmode=GetModConfigData("toggle_showmode") local show_only_euqiprod=GetModConfigData("show_only_euqiprod") local fontsize=GetModConfigData("fontsize") local vertical_offset=GetModConfigData("vertical_offset") local colour_base=GetModConfigData("colour_base") local colour_spring=GetModConfigData("colour_spring") local colour_summer=GetModConfigData("colour_summer") local colour_autumn=GetModConfigData("colour_autumn") local colour_winter=GetModConfigData("colour_winter") local show_weight=1 local loc=require "languages/loc" local lan=loc and loc.GetLanguage and loc.GetLanguage() local IsChineseLanguage=(lan==GLOBAL.LANGUAGE.CHINESE_S or lan==GLOBAL.LANGUAGE.CHINESE_S_RAIL) and true or false local function GetAnnounce(StrChinese,StrEnglish) if IsChineseLanguage then return StrChinese else return StrEnglish end end local function InGame() return _G.ThePlayer and _G.ThePlayer.HUD and not _G.ThePlayer.HUD:HasInputFocus() end local function EquipRod(inst) if inst and inst.replica.inventory then local equiped_hands=inst.replica.inventory:GetEquippedItem("hands") if equiped_hands and equiped_hands.prefab=="oceanfishingrod" then return equiped_hands end end return nil end local function CreateLabel(fish) local label=fish.entity:AddLabel() label:SetFontSize(fontsize) label:SetFont(GLOBAL.BODYTEXTFONT) label:SetWorldOffset(0,vertical_offset,0) label:SetColour(1,1,1) label:Enable(true) return label end local function GetColour(number) local r,g,b=1,1,1 if number==1 then r,g,b=1,1,1 elseif number==2 then r,g,b=0,0,0 elseif number==3 then r,g,b=1,102/255,178/255 elseif number==4 then r,g,b=1,0,0 elseif number==5 then r,g,b=1,69/255,0 elseif number==6 then r,g,b=1,165/255,0 elseif number==7 then r,g,b=1,1,0 elseif number==8 then r,g,b=0,1,0 elseif number==9 then r,g,b=0,51/255,0 elseif number==10 then r,g,b=0,1,1 elseif number==11 then r,g,b=102/255,178/255,1 elseif number==12 then r,g,b=0,0,1 elseif number==13 then r,g,b=153/255,0,153/255 elseif number==14 then r,g,b=192/255,192/255,192/255 end return r,g,b end local function ApplyColour(fish) if fish.prefab=="oceanfish_small_7" then fish.entity:AddLabel():SetColour(GetColour(colour_spring)) elseif fish.prefab=="oceanfish_small_8" then fish.entity:AddLabel():SetColour(GetColour(colour_summer)) elseif fish.prefab=="oceanfish_small_6" then fish.entity:AddLabel():SetColour(GetColour(colour_autumn)) elseif fish.prefab=="oceanfish_medium_8" then fish.entity:AddLabel():SetColour(GetColour(colour_winter)) else fish.entity:AddLabel():SetColour(GetColour(colour_base)) end end local function GetOceanfishEntities() if not _G.ThePlayer then return nil,"No _G.ThePlayer for positions" end local playerpos=_G.ThePlayer:GetPosition() local entity_table=TheSim:FindEntities(playerpos.x,0,playerpos.z,80,{"oceanfish","swimming"}) return entity_table end local function StopShowOceanfishThread() if not InGame() then return end if _G.ThePlayer and _G.ThePlayer.showoceanfish_thread then _G.KillThreadsWithID(_G.ThePlayer.showoceanfish_thread.id) _G.ThePlayer.showoceanfish_thread:SetList(nil) _G.ThePlayer.showoceanfish_thread=nil end end local function StartShowOceanfishThread() if not InGame() then return end if _G.ThePlayer then _G.ThePlayer.showoceanfish_thread=_G.ThePlayer:StartThread(function() while _G.ThePlayer and _G.ThePlayer.showoceanfish_thread do Sleep(FRAMES) if default_showoceanfish and _G.ThePlayer then local ent_table=GetOceanfishEntities() if not ent_table then return nil end for _,ent in pairs(ent_table) do CreateLabel(ent) ApplyColour(ent) local str=STRINGS.NAMES[string.upper(ent.prefab .. "_inv")] or STRINGS.NAMES[string.upper(ent.prefab)] or nil if show_weight==1 then if str and ent.components.weighable and ent.fish_def and ent.fish_def.weight_min and ent.fish_def.weight_max then local weight=math.floor(ent.components.weighable:GetWeightPercent()*100) if weight>=70 then str=str .. "\n" .. weight .. "% 󰀫" else str=str .. "\n" .. weight .. "%" end end elseif show_weight==2 then if str and ent.components.weighable then local weight=ent.components.weighable:GetWeight() str=str .. "\n" .. weight end end if str and default_showoceanfish and (show_only_euqiprod==false or (show_only_euqiprod and EquipRod(_G.ThePlayer))) then ent.entity:AddLabel():SetText(str) else ent.entity:AddLabel():SetText("") end end else for _,ent in pairs(GetOceanfishEntities() or{}) do if ent then ent.entity:AddLabel():SetText("") ent.entity:AddLabel():Enable(false) end end StopShowOceanfishThread() end end end) _G.ThePlayer.showoceanfish_thread.id="mod_show_oceanfish_thread" end end if toggle_showmode~="" then local haskey=false for k,_ in pairs(GLOBAL) do if k==toggle_showmode then local toggle_showmode=GLOBAL[toggle_showmode] TheInput:AddKeyUpHandler(toggle_showmode,function() if not InGame() then return end Input_Show_Value=Input_Show_Value==0 and 1 or 0 if Input_Show_Value==1 then _G.ThePlayer.components.talker:Say(GetAnnounce("显示鱼群：启用","Show Oceanfish : Enable")) default_showoceanfish=true if not _G.ThePlayer.showoceanfish_thread then StartShowOceanfishThread() end elseif Input_Show_Value==0 then _G.ThePlayer.components.talker:Say(GetAnnounce("显示鱼群：禁用","Show Oceanfish : Disable")) default_showoceanfish=false if not _G.ThePlayer.showaggro_thread then StopShowOceanfishThread() end else _G.ThePlayer.components.talker:Say(GetAnnounce("显示鱼群：启用？","Show Oceanfish : Enable?")) default_showoceanfish=true Input_Show_Value=1 if not _G.ThePlayer.showoceanfish_thread then StartShowOceanfishThread() end end end) haskey=true break end end if not haskey then print(GetAnnounce("模组警告：显示鱼群：热键[" .. tostring(toggle_showmode) .. "]非法.","Mod Warning: Show Oceanfish: Show Oceanfish: hotkey [" .. tostring(toggle_showmode) .. "] is illegal.")) end end local default_oceanfishing=GetModConfigData("default_oceanfishing")==0 and false or true local toggle_oceanfishingmode=GetModConfigData("toggle_oceanfishingmode") local Input_Oceanfishing_Value=GetModConfigData("default_oceanfishing") local oceanfishinglevel=GetModConfigData("default_oceanfishing")==1 and 1 or 0 local function StopOceanfishingThread() if not InGame() then return end if _G.ThePlayer and _G.ThePlayer.oceanfishing_thread then _G.KillThreadsWithID(_G.ThePlayer.oceanfishing_thread.id) _G.ThePlayer.oceanfishing_thread:SetList(nil) _G.ThePlayer.oceanfishing_thread=nil end end local function StartOceanfishingThread() if not InGame() then return end if _G.ThePlayer then _G.ThePlayer.oceanfishing_thread=_G.ThePlayer:StartThread(function() while _G.ThePlayer and _G.ThePlayer.oceanfishing_thread do Sleep(FRAMES * 20) if default_oceanfishing and _G.ThePlayer then local rod=EquipRod(_G.ThePlayer) if rod and ( (_G.ThePlayer.sg and _G.ThePlayer.sg:HasStateTag("fishing")) or _G.ThePlayer:HasTag("fishing") ) then local action,TheFish if rod and rod.replica.oceanfishingrod then TheFish=rod.replica.oceanfishingrod:GetTarget() if TheFish~=nil and TheFish:HasTag("oceanfishable") then if rod.replica.oceanfishingrod:IsLineTensionHigh() or (oceanfishinglevel==0 and rod.replica.oceanfishingrod:IsLineTensionGood()) or TheFish.is_struggling_state then action=nil elseif TheFish:HasTag("oceanfishing_catchable") then action=_G.ACTIONS.OCEAN_FISHING_CATCH else action=_G.ACTIONS.OCEAN_FISHING_REEL end end end if action~=nil then local pos=_G.ThePlayer:GetPosition() local buffaction=_G.BufferedAction(_G.ThePlayer,nil,action,rod,pos) local playercontroller=_G.ThePlayer.components.playercontroller if playercontroller.ismastersim then playercontroller:DoAction(buffaction) else if playercontroller.locomotor then buffaction.preview_cb=function() _G.SendRPCToServer(_G.RPC.LeftClick,action.code,pos.x,pos.z,nil,false,0,true) end playercontroller:DoAction(buffaction) else if buffaction.action and buffaction.action.pre_action_cb~=nil then buffaction.action.pre_action_cb(buffaction) end _G.SendRPCToServer(_G.RPC.LeftClick,action.code,pos.x,pos.z,nil,false,0,true) end end end end else StopOceanfishingThread() end end end) _G.ThePlayer.oceanfishing_thread.id="mod_oceanfishing_thread" end end if toggle_oceanfishingmode~="" then local haskey=false for k,_ in pairs(GLOBAL) do if k==toggle_oceanfishingmode then local toggle_oceanfishingmode=GLOBAL[toggle_oceanfishingmode] TheInput:AddKeyUpHandler(toggle_oceanfishingmode,function() if not InGame() then return end Input_Oceanfishing_Value=Input_Oceanfishing_Value + 1 if Input_Oceanfishing_Value>2 then Input_Oceanfishing_Value=0 end if Input_Oceanfishing_Value==1 then _G.ThePlayer.components.talker:Say(GetAnnounce("自动海钓：激进模式","Auto Oceanfishing : ♥")) default_oceanfishing=true oceanfishinglevel=1 if not _G.ThePlayer.showoceanfish_thread then StartOceanfishingThread() end elseif Input_Oceanfishing_Value==2 then _G.ThePlayer.components.talker:Say(GetAnnounce("自动海钓：保守模式","Auto Oceanfishing : ♡")) default_oceanfishing=true oceanfishinglevel=0 if not _G.ThePlayer.showaggro_thread then StartOceanfishingThread() end elseif Input_Oceanfishing_Value==0 then _G.ThePlayer.components.talker:Say(GetAnnounce("自动海钓：禁用","Auto Oceanfishing : Disable")) default_oceanfishing=false if not _G.ThePlayer.showaggro_thread then StopOceanfishingThread() end else _G.ThePlayer.components.talker:Say(GetAnnounce("自动海钓：激进模式？","Auto Oceanfishing : Enable?")) default_oceanfishing=true Input_Oceanfishing_Value=1 oceanfishinglevel=1 if not _G.ThePlayer.showoceanfish_thread then StartOceanfishingThread() end end end) haskey=true break end end if not haskey then print(GetAnnounce("模组警告：自动海钓：热键[" .. tostring(toggle_oceanfishingmode) .. "]非法.","Mod Warning: Show Oceanfish: Auto Oceanfishing: hotkey [" .. tostring(toggle_oceanfishingmode) .. "] is illegal.")) end end AddPlayerPostInit(function(inst) inst:DoTaskInTime(1,function() if inst==_G.ThePlayer then StartShowOceanfishThread() StartOceanfishingThread() end end) end)